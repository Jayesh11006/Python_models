import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
import joblib

# Load the data
data = {
    'Memory': [6, 8, 8, 4, 4],
    'Graphics_Card': ['NVIDIA GeForce GTX 980', 'NVIDIA GeForce GTX 960', 'NVIDIA GeForce GTX 970', 'Intel HD 4000', 'Intel HD 4000'],
    'CPU': ['Intel Core i5-6600', 'Intel Core i5-2500K', 'Intel Core i5-3570K', 'Intel Core i3-3225', 'Intel Core 2 Duo E8400'],
    'File_Size': [30, 70, 70, 15, 23],
    'OS': ['Windows 10', 'Windows 10 64-bit', 'Windows 10 64-Bit', 'Windows 7/8/10 64-bit', 'Windows 7 64-bit'],
    'Name': ['Hogwarts Legacy', 'God of War', 'Cyberpunk 2077', 'Fortnite', 'Valorant']
}

df = pd.DataFrame(data)

# Convert categorical features to numerical using Label Encoding
label_encoder = LabelEncoder()
df['Graphics_Card'] = label_encoder.fit_transform(df['Graphics_Card'])
df['OS'] = label_encoder.fit_transform(df['OS'])

# Split data into features (X) and target (y)
X = df.drop(columns=['Name'])
y = df['Name']

# Create and train the model
model = RandomForestClassifier()
model.fit(X, y)

# Save the model
joblib.dump(model, 'game_recommendation_model.pkl')
_______________________________________________________________________________________


html:-

<!-- templates/index.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Recommendation</title>
</head>
<body>
    <h2>Game Recommendation</h2>
    <form action="/predict" method="post">
        <label for="memory">Memory (GB):</label>
        <input type="number" name="memory" id="memory" required><br><br>
        <label for="graphics_card">Graphics Card:</label>
        <select name="graphics_card" id="graphics_card" required>
            <option value="NVIDIA GeForce GTX 980">NVIDIA GeForce GTX 980</option>
            <option value="NVIDIA GeForce GTX 960">NVIDIA GeForce GTX 960</option>
            <option value="NVIDIA GeForce GTX 970">NVIDIA GeForce GTX 970</option>
            <option value="Intel HD 4000">Intel HD 4000</option>
        </select><br><br>
        <label for="os">Operating System:</label>
        <select name="os" id="os" required>
            <option value="Windows 10">Windows 10</option>
            <option value="Windows 10 64-bit">Windows 10 64-bit</option>
            <option value="Windows 10 64-Bit">Windows 10 64-Bit</option>
            <option value="Windows 7/8/10 64-bit">Windows 7/8/10 64-bit</option>
            <option value="Windows 7 64-bit">Windows 7 64-bit</option>
        </select><br><br>
        <input type="submit" value="Recommend">
    </form>
    {% if prediction %}
        <h3>Recommended Game: {{ prediction }}</h3>
    {% endif %}
</body>
</html>

--------------------------------

# app.py

from flask import Flask, render_template, request
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
import joblib

app = Flask(__name__)

# Load the trained model
model = joblib.load('game_recommendation_model.pkl')

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        # Get user input from form
        memory = int(request.form['memory'])
        graphics_card = request.form['graphics_card']
        os = request.form['os']

        # Encode categorical variables
        label_encoder = LabelEncoder()
        graphics_card_encoded = label_encoder.fit_transform([graphics_card])
        os_encoded = label_encoder.fit_transform([os])

        # Make prediction
        prediction = model.predict([[memory, graphics_card_encoded[0], os_encoded[0]]])[0]
        return render_template('index.html', prediction=prediction)

if __name__ == '__main__':
    app.run(debug=True)

